{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","PathfindingVisualizer/utils.jsx","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","Navbar","Legend","style","backgroundColor","PathfindingVisualizer","state","mouseIsPressed","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","onClick","visualizeDijkstra","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","ReactDOM","render"],"mappings":"oUAIqBA,G,uLACT,IAAD,EAUHC,KAAKC,MARPC,EAFK,EAELA,IACAC,EAHK,EAGLA,SACAC,EAJK,EAILA,QACAC,EALK,EAKLA,OACAC,EANK,EAMLA,YACAC,EAPK,EAOLA,aACAC,EARK,EAQLA,UACAC,EATK,EASLA,IAEIC,EAAiBP,EACnB,cACAC,EACA,aACAC,EACA,YACA,GAEJ,OACE,yBACEM,GAAE,eAAUF,EAAV,YAAiBP,GACnBU,UAAS,eAAUF,GACnBJ,YAAa,kBAAMA,EAAYG,EAAKP,IACpCK,aAAc,kBAAMA,EAAaE,EAAKP,IACtCM,UAAW,kBAAMA,W,GA1BSK,cCA3B,SAASC,EAASC,EAAMC,EAAWC,GACxC,IAAMC,EAAsB,GAC5BF,EAAUG,SAAW,EAErB,IADA,IAAMC,EAsCR,SAAqBL,GACnB,IAAMM,EAAQ,GADW,uBAEzB,YAAkBN,EAAlB,+CAAwB,CAAC,IAAdN,EAAa,+BACtB,YAAmBA,EAAnB,+CAAwB,CAAC,IAAda,EAAa,QACtBD,EAAME,KAAKD,IAFS,oFAFC,kFAOzB,OAAOD,EA7CgBG,CAAYT,GAC1BK,EAAeK,QAAQ,CAC9BC,EAAoBN,GACpB,IAAMO,EAAcP,EAAeQ,QAEnC,IAAID,EAAYtB,OAAhB,CAGA,GAAIsB,EAAYR,WAAaU,IAAU,OAAOX,EAG9C,GAFAS,EAAYG,WAAY,EACxBZ,EAAoBK,KAAKI,GACrBA,IAAgBV,EAAY,OAAOC,EACvCa,EAAyBJ,EAAaZ,KAI1C,SAASW,EAAoBN,GAC3BA,EAAeY,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMd,SAAWe,EAAMf,YAG/D,SAASY,EAAyBT,EAAMP,GACtC,IAAMoB,EAOR,SAA+Bb,EAAMP,GACnC,IAAMqB,EAAY,GACXlC,EAAYoB,EAAZpB,IAAKO,EAAOa,EAAPb,IACRA,EAAM,GAAG2B,EAAUb,KAAKR,EAAKN,EAAM,GAAGP,IACtCO,EAAMM,EAAKU,OAAS,GAAGW,EAAUb,KAAKR,EAAKN,EAAM,GAAGP,IACpDA,EAAM,GAAGkC,EAAUb,KAAKR,EAAKN,GAAKP,EAAM,IACxCA,EAAMa,EAAK,GAAGU,OAAS,GAAGW,EAAUb,KAAKR,EAAKN,GAAKP,EAAM,IAC7D,OAAOkC,EAAUC,QAAO,SAAAC,GAAQ,OAAKA,EAASR,aAdnBS,CAAsBjB,EAAMP,GADX,uBAE5C,YAAuBoB,EAAvB,+CAA2C,CAAC,IAAjCG,EAAgC,QACzCA,EAASnB,SAAWG,EAAKH,SAAW,EACpCmB,EAASE,aAAelB,GAJkB,mFCzBvC,IAAMmB,EAAb,iLAEI,OACE,kBAAC,WAAD,KACE,yBAAK7B,UAAU,+CACb,0BAAMA,UAAU,oBAAhB,0CALV,GAA4BC,aAaf6B,EAAb,iLAEI,OACE,kBAAC,WAAD,KACE,yBAAK9B,UAAU,eACb,6BACE,yBAAKA,UAAU,oBACf,yBAAKA,UAAU,eAAf,eAEF,6BACE,yBAAKA,UAAU,qBACf,yBAAKA,UAAU,eAAf,aAEF,6BACE,yBACEA,UAAU,OACV+B,MAAO,CAACC,gBAAiB,6BAC3B,yBAAKhC,UAAU,eAAf,iBAEF,6BACE,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,eAAf,cAEF,6BACE,yBACEA,UAAU,OACV+B,MAAO,CAACC,gBAAiB,wBAC3B,yBAAKhC,UAAU,eAAf,wBA3BZ,GAA4BC,a,oOCR5B,IAKqBgC,E,YACnB,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACX/B,KAAM,GACNgC,gBAAgB,GAJN,E,iFASZ,IAAMhC,EAAOiC,IACbhD,KAAKiD,SAAS,CAAClC,W,sCAGDN,EAAKP,GACnB,IAAMgD,EAAUC,EAA0BnD,KAAK8C,MAAM/B,KAAMN,EAAKP,GAChEF,KAAKiD,SAAS,CAAClC,KAAMmC,EAASH,gBAAgB,M,uCAG/BtC,EAAKP,GACpB,GAAKF,KAAK8C,MAAMC,eAAhB,CACA,IAAMG,EAAUC,EAA0BnD,KAAK8C,MAAM/B,KAAMN,EAAKP,GAChEF,KAAKiD,SAAS,CAAClC,KAAMmC,O,sCAIrBlD,KAAKiD,SAAS,CAACF,gBAAgB,M,sCAGjB7B,EAAqBkC,GACnC,IAD8D,IAAD,kBACpDC,GACP,GAAIA,IAAMnC,EAAoBO,OAI5B,OAHA6B,YAAW,WACT,EAAKC,oBAAoBH,KACxB,GAAKC,GACF,CAAN,UAEFC,YAAW,WACT,IAAMhC,EAAOJ,EAAoBmC,GACjCG,SAASC,eAAT,eAAgCnC,EAAKb,IAArC,YAA4Ca,EAAKpB,MAAOU,UACtD,sBACD,GAAKyC,IAXDA,EAAI,EAAGA,GAAKnC,EAAoBO,OAAQ4B,IAAK,CAAC,IAAD,IAA7CA,GAA6C,qC,0CAepCD,GAClB,IAD6C,IAAD,WACnCC,GACPC,YAAW,WACT,IAAMhC,EAAO8B,EAAyBC,GACtCG,SAASC,eAAT,eAAgCnC,EAAKb,IAArC,YAA4Ca,EAAKpB,MAAOU,UACtD,4BACD,GAAKyC,IALDA,EAAI,EAAGA,EAAID,EAAyB3B,OAAQ4B,IAAM,EAAlDA,K,0CASU,IACZtC,EAAQf,KAAK8C,MAAb/B,KACDC,EAAYD,EA9DC,GACA,IA8DbE,EAAaF,EA7DC,GACA,IA6DdG,EAAsBJ,EAASC,EAAMC,EAAWC,GAChDmC,EFfH,SAAqCnC,GAG1C,IAFA,IAAMmC,EAA2B,GAC7BM,EAAczC,EACK,OAAhByC,GACLN,EAAyBO,QAAQD,GACjCA,EAAcA,EAAYlB,aAE5B,OAAOY,EEQ4BQ,CAA4B3C,GAC7DjB,KAAK6D,gBAAgB3C,EAAqBkC,K,+BAGlC,IAAD,SACwBpD,KAAK8C,MAA7B/B,EADA,EACAA,KAAMgC,EADN,EACMA,eAEb,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKnC,UAAU,eACb,4BACEA,UAAU,iCACVkD,QAAS,kBAAM,EAAKC,sBAFtB,mCAMF,yBAAKnD,UAAU,QACZG,EAAKiD,KAAI,SAACvD,EAAKwD,GACd,OACE,yBAAKC,IAAKD,GACPxD,EAAIuD,KAAI,SAAC1C,EAAM6C,GAAa,IACpB1D,EAAuCa,EAAvCb,IAAKP,EAAkCoB,EAAlCpB,IAAKC,EAA6BmB,EAA7BnB,SAAUC,EAAmBkB,EAAnBlB,QAASC,EAAUiB,EAAVjB,OACpC,OACE,kBAAC,EAAD,CACE6D,IAAKC,EACLjE,IAAKA,EACLC,SAAUA,EACVC,QAASA,EACTC,OAAQA,EACR0C,eAAgBA,EAChBzC,YAAa,SAACG,EAAKP,GAAN,OAAc,EAAKkE,gBAAgB3D,EAAKP,IACrDK,aAAc,SAACE,EAAKP,GAAN,OACZ,EAAKmE,iBAAiB5D,EAAKP,IAE7BM,UAAW,kBAAM,EAAK8D,iBACtB7D,IAAKA,iB,GAjGwBI,aA6G7CmC,EAAiB,WAErB,IADA,IAAMjC,EAAO,GACJN,EAAM,EAAGA,EAAM,GAAIA,IAAO,CAEjC,IADA,IAAM8D,EAAa,GACVrE,EAAM,EAAGA,EAAM,GAAIA,IAC1BqE,EAAWhD,KAAKiD,EAAWtE,EAAKO,IAElCM,EAAKQ,KAAKgD,GAEZ,OAAOxD,GAGHyD,EAAa,SAACtE,EAAKO,GACvB,MAAO,CACLP,MACAO,MACAL,QAlImB,IAkIVK,GAjIU,KAiIgBP,EACnCC,SAjIoB,IAiIVM,GAhIU,KAgIiBP,EACrCiB,SAAUU,IACVC,WAAW,EACXzB,QAAQ,EACRmC,aAAc,OAIZW,EAA4B,SAACpC,EAAMN,EAAKP,GAC5C,IAAMgD,EAAUnC,EAAK0D,QACfnD,EAAO4B,EAAQzC,GAAKP,GACpBwE,E,yVAAO,IACRpD,EADQ,CAEXjB,QAASiB,EAAKjB,SAGhB,OADA6C,EAAQzC,GAAKP,GAAOwE,EACbxB,GC3IMyB,G,uLARX,OACE,yBAAK/D,UAAU,OACb,kBAAC,EAAD,W,GAJUC,cCAlB+D,IAASC,OAAO,kBAAC,EAAD,MAASrB,SAASC,eAAe,W","file":"static/js/main.5ffca2eb.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React, {Component, Fragment} from 'react';\r\n\r\nexport class Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <nav className=\"navbar navbar-light text-light bg-dark py-3\">\r\n          <span className=\"nav-text mx-auto\">\r\n            Pathfinding Algorithm Visualizer\r\n          </span>\r\n        </nav>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\nexport class Legend extends Component {\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <div className=\"legend-grid\">\r\n          <div>\r\n            <div className=\"node node-start\"></div>\r\n            <div className=\"legend-desc\">Start Node</div>\r\n          </div>\r\n          <div>\r\n            <div className=\"node node-finish\"></div>\r\n            <div className=\"legend-desc\">End Node</div>\r\n          </div>\r\n          <div>\r\n            <div\r\n              className=\"node\"\r\n              style={{backgroundColor: 'rgba(0, 190, 218, 0.75)'}}></div>\r\n            <div className=\"legend-desc\">Visited Node</div>\r\n          </div>\r\n          <div>\r\n            <div className=\"node node-wall\"></div>\r\n            <div className=\"legend-desc\">Wall Node</div>\r\n          </div>\r\n          <div>\r\n            <div\r\n              className=\"node\"\r\n              style={{backgroundColor: 'rgb(255, 254, 106)'}}></div>\r\n            <div className=\"legend-desc\">Shortest Path</div>\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, {Component, Fragment} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\r\nimport {Navbar, Legend} from './utils';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nconst START_NODE_ROW = 5;\r\nconst START_NODE_COL = 15;\r\nconst FINISH_NODE_ROW = 5;\r\nconst FINISH_NODE_COL = 35;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid});\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false});\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n\r\n    return (\r\n      <Fragment>\r\n        <Navbar />\r\n        <Legend />\r\n        <div className=\"button-grid\">\r\n          <button\r\n            className=\"btn btn-lg btn-outline-success\"\r\n            onClick={() => this.visualizeDijkstra()}>\r\n            Visualize Dijkstra's Algorithm\r\n          </button>\r\n        </div>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {row, col, isFinish, isStart, isWall} = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 11; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\" >\r\n        <PathfindingVisualizer></PathfindingVisualizer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}